%% ProjectionSuperficialSurface
% Determines the most superficial surface using a degraded image generated by
% and project signal around it

clearvars
close all

%% Prerequisite //////////////////////////////////////////////////////////
% Run "1_Downscale-and-binarize.ijm"
% /////////////////////////////////////////////////////////////////////////


%% Parameters ////////////////////////////////////////////////////////////
% Path where to find hyperstacks to project
% Must end with 'Example'
Path='\\gaia.pasteur.fr\MVS_DATA1\Aurelien\PAPER\23-02-24_Hypoblast-paper\CodeAvailability\Staining-signal-extraction\Example';

% Projection parameters
% For Apical projection
ApicalShift=1;
BasalShift=1;
% Example : for projecting the 3 planes centered around the topomap, put
% ApicalShift=1 and BasalShift=1

% Name of the the ending of the reference channel
RefChannelEnd='_HOECHST.tif';
% Other channels
OtherChannels={'_FOXA2.tif' '_NODAL.tif'};
% /////////////////////////////////////////////////////////////////////////


%% CODE ///////////////////////////////////////////////////////////////////
% Detecting all the 'tif' files in the folder TopoMapDetection
files = dir(fullfile([Path filesep 'TopoMapDetection'], '*.tif'));
Names=[];
for i=1:length(files)
    Names{i}=files(i).name;
end

% Creating the output folders
PathOutProjectionApical=[Path filesep 'Projection'];
mkdir(PathOutProjectionApical);

tic
for i=1:length(Names)
    Name=Names{i};

    %% Opening raw image
    % Reading image
    FileTif=[Path filesep filesep Name];
    InfoImage=imfinfo(FileTif);
    mImage=InfoImage(1).Width;
    nImage=InfoImage(1).Height;
    NumberImages=length(InfoImage);
    ImageRaw=zeros(nImage,mImage,NumberImages,'uint16');
    TifLink = Tiff(FileTif, 'r');
    for j=1:NumberImages
        TifLink.setDirectory(j);
        ImageRaw(:,:,j)=TifLink.read();
    end
    TifLink.close();

    % Calculating width and height of the image
    Height=size(ImageRaw,1);
    Width=size(ImageRaw,2);

    %% Topomap calculation
    % Reading image
    FileTif=[Path filesep 'TopoMapDetection' filesep Name];
    InfoImage=imfinfo(FileTif);
    mImage=InfoImage(1).Width;
    nImage=InfoImage(1).Height;
    NumberImages=length(InfoImage);
    Image=zeros(nImage,mImage,NumberImages,'uint32');
    TifLink = Tiff(FileTif, 'r');
    for j=1:NumberImages
        TifLink.setDirectory(j);
        Image(:,:,j)=TifLink.read();
    end
    TifLink.close();

    % Detection of basal or apical plane location for each pixel
    Topomap=nan(size(Image,1),size(Image,2));
    for x=1:size(Image,1)
        for y=1:size(Image,2)
            Vect=squeeze(Image(x,y,:));
            Apical=min(find(Vect~=0));
            if ~isempty(Apical)
                Topomap(x,y)=Apical;
            end
        end
    end

 
    % Interpolation of the topomap to fill the NaN
    Topomap=inpaintn(Topomap);

    % Interpolation of the topomap
    [X,Y] = meshgrid(1:size(Image,2),1:size(Image,1));
    [Xq,Yq] = meshgrid(linspace(1,size(Image,2),Width),linspace(1,size(Image,1),Height));
    Topo=interp2(X,Y,Topomap,Xq,Yq);

    % Following evolution
    disp([num2str(i) '/' num2str(length(Names)) ' calculated topo maps.']);


    %% projection reference channel
    Projection=zeros(size(ImageRaw,1),size(ImageRaw,2));
    MaxZ=size(ImageRaw,3);
    for x=1:size(Projection,1)
        for y=1:size(Projection,2)
            % Only calculating projection for non-NaN topomap values
            if ~isnan(Topo(x,y))
                % Checking whether projection is out of edges of the image
                Begin=round(Topo(x,y)-ApicalShift);
                if Begin<1
                    Begin=1;
                end
                if Begin>MaxZ
                    Begin=MaxZ;
                end
                End=round(Topo(x,y)+BasalShift);
                if End<1
                    End=1;
                end
                if End>MaxZ
                    End=MaxZ;
                end

                % Projection
                Projection(x,y)=nanmax(ImageRaw(x,y,Begin:End));
            end
        end
    end
    % Saving projection
    imwrite(uint16(Projection),[PathOutProjectionApical filesep Name]);

    % Following evolution
    disp([num2str(i) '/' num2str(length(Names)) ' projection done.']);

    %% projection of other channels
    % Detect the name of the file
    BeginningName=Name(1:length(Name)-length(RefChannelEnd));

    for channel=1:length(OtherChannels)

        tic
        % Name of the file
        Name=[BeginningName OtherChannels{channel}];

        % Read the raw image
        FileTif=[Path filesep filesep Name];
        InfoImage=imfinfo(FileTif);
        mImage=InfoImage(1).Width;
        nImage=InfoImage(1).Height;
        NumberImages=length(InfoImage);
        ImageRaw=zeros(nImage,mImage,NumberImages,'uint16');
        TifLink = Tiff(FileTif, 'r');
        for j=1:NumberImages
            TifLink.setDirectory(j);
            ImageRaw(:,:,j)=TifLink.read();
        end
        TifLink.close();

        % Projection
        Projection=zeros(size(ImageRaw,1),size(ImageRaw,2));
        MaxZ=size(ImageRaw,3);
        for x=1:size(Projection,1)
            for y=1:size(Projection,2)
                % Only calculating projection for non-NaN topomap values
                if ~isnan(Topo(x,y))
                    % Checking whether projection is out of edges of the image
                    Begin=round(Topo(x,y)-ApicalShift);
                    if Begin<1
                        Begin=1;
                    end
                    if Begin>MaxZ
                        Begin=MaxZ;
                    end
                    End=round(Topo(x,y)+BasalShift);
                    if End<1
                        End=1;
                    end
                    if End>MaxZ
                        End=MaxZ;
                    end

                    % Projection
                    Projection(x,y)=nanmax(ImageRaw(x,y,Begin:End));
                end
            end
        end
        % Saving projection
        imwrite(uint16(Projection),[PathOutProjectionApical filesep Name]);

        % Following evolution
        disp([num2str(i) '/' num2str(length(Names)) ' projection done.']);
        toc
    end

    disp('Done');
end
